/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 11.01.2022 05:31:52

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 2272;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[34];
TfLiteEvalTensor tflEvalTensors[34];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[16];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,224 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0029258579015731812, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { -3155, -437, 0, 7370, -6381, -15573, -8960, -6984, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 5.5742480071785394e-06, 1.6540388969588093e-05, 5.0676767386903521e-06, 7.0543878791795578e-06, 5.9124326980963815e-06, 1.5893985619186424e-05, 6.0966976889176294e-06, 1.614707252883818e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { -861, -2390, -1764, -3463, -306, 747, -7466, 535, 2590, -4334, -828, -6793, -1690, 2571, -5081, -1605, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 7.069263665471226e-05, 5.9617101214826107e-05, 5.9940139180980623e-05, 6.6205335315316916e-05, 4.9162579671246931e-05, 7.7942189818713814e-05, 4.3722848204197362e-05, 6.5630287281237543e-05, 7.6694705057889223e-05, 4.8841466195881367e-05, 5.9738875279435888e-05, 5.7007437135325745e-05, 5.7437770010437816e-05, 6.1101221945136786e-05, 5.9488131228135899e-05, 2.3866667106631212e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -5239, -6726, -541, -2043, -1434, -3955, -525, -6438, -605, -1527, -7561, 328, -815, -1282, -6196, -6228, -6145, -874, -3665, 777, -6460, -66, -4019, -7018, -2244, -1112, -659, 9, -6504, -3824, 6, -2326, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.2890875192824751e-05, 4.4648528273683041e-05, 5.2284274715930223e-05, 4.3675223423633724e-05, 6.5176696807611734e-05, 5.655730637954548e-05, 5.8124383940594271e-05, 5.5315878853434697e-05, 4.8888123274082318e-05, 4.0983082726597786e-05, 3.4178065106971189e-05, 4.6977016609162092e-05, 3.5897501220460981e-05, 5.3156287322053686e-05, 4.9859980208566412e-05, 1.5922460079309531e-05, 3.9827158616390079e-05, 6.1173304857220501e-05, 1.5673680536565371e-05, 4.9051974201574922e-05, 4.5284228690434247e-05, 4.1988718294305727e-05, 2.084286097669974e-05, 2.0172825315967202e-05, 4.9971906264545396e-05, 4.7148714656941593e-05, 4.9343168939230964e-05, 6.8416011345107108e-05, 2.3478860384784639e-05, 1.5300907762139104e-05, 4.9616035539656878e-05, 6.5766354964580387e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[64] = { 569, 1101, 618, -449, 1538, -1605, 468, -3110, 892, 25, -778, -2285, -2003, -2371, 1409, 1034, 1014, 591, -805, 425, -198, -1888, 586, 2226, -1106, 864, -4752, -1600, -511, -867, -590, 519, -1209, -206, -2787, 1258, 776, -317, -930, -452, 997, -2377, 1162, -1383, 50, 370, 45, -1549, 1203, -416, 220, -186, -2649, 1167, -1043, -3693, -97, 1331, -257, 60, 1072, -1300, -667, -3217, };
const TfArray<1, int> tensor_dimension5 = { 1, { 64 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00012840166164096445, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[3] = { -270, 467, -329, };
const TfArray<1, int> tensor_dimension6 = { 1, { 3 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00051551603246480227, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[64*32] = { 
  -27, 29, -13, 30, -2, -18, -40, -5, -42, -11, 40, -30, -21, -9, -38, 11, 0, -70, -5, 11, -5, -13, -2, 14, 1, 41, -60, 10, 0, 14, -29, 37, 
  -33, -8, -20, -44, 49, 0, 47, -47, -20, -27, -19, 32, 31, -31, -30, 2, -19, -28, 5, -8, -20, -43, 2, 12, -19, -17, 21, -25, 6, 12, 5, -11, 
  -34, -16, -20, -49, 43, -37, 25, 5, 9, -27, -29, 21, 20, -29, -4, 13, 21, 6, -9, -42, 8, -57, -4, 29, -68, -23, 35, -49, 7, 22, 48, 14, 
  39, -38, 31, -4, -15, -57, -1, -41, 33, -14, -37, 8, -38, 46, 28, -29, -80, 74, -21, 6, -41, 14, -2, -4, 14, -38, -39, 29, 5, 14, -9, 10, 
  -46, -30, -31, -75, 14, -12, 18, -23, 2, -31, -51, 17, 42, -46, -6, 2, -19, -9, -30, -22, -11, -64, -22, -2, -59, -44, 12, -66, 6, 2, 41, -54, 
  -26, 18, -9, -1, 25, -13, -36, 15, -24, 19, -15, -40, 2, 1, -27, 9, 5, -36, -3, -12, -3, 27, -18, 18, 6, 0, -30, 6, 12, -12, -11, -12, 
  11, 44, 23, 55, -66, 47, -21, 62, 42, 84, 23, -19, -15, 37, 32, 14, 32, -3, -6, 79, 39, 25, 11, -3, 32, 58, -35, 68, 9, 11, -21, 14, 
  4, -7, -15, 38, 21, -59, -1, 20, -21, 15, 19, 1, 21, 3, -19, -15, -11, -49, 15, 28, -12, -9, 3, -13, 22, 6, 10, 15, -3, 18, 7, 31, 
  -23, 7, -25, -18, -47, 45, -81, 57, -47, 52, 11, -67, -59, 2, -23, 0, 33, -18, -21, 2, 14, 23, 15, 29, 3, 41, -36, 1, 51, 21, -53, 46, 
  32, -1, 7, 37, 5, 25, -63, -1, -30, 30, 14, -16, -3, 14, 13, -16, -19, 24, -15, 23, 13, 38, -5, -28, 42, 71, -23, 46, -14, 0, -12, 50, 
  43, -29, -32, -12, 50, -22, 32, -27, 71, -12, 0, 38, 46, 45, 35, 24, -54, 113, -26, -1, -14, -3, -11, 24, 1, 10, 10, 41, 6, -13, 52, -62, 
  -13, 27, -15, -4, -1, 13, -29, 4, -13, 13, 35, -16, -26, -19, -8, -18, 5, -15, 5, 26, -24, -10, -18, -9, 19, 19, -5, 18, -8, 2, -9, -53, 
  -27, 22, -3, 25, -2, 58, -34, 29, -47, 8, 17, -40, -42, -10, -36, -16, 11, -20, 19, 4, 36, -1, 26, 13, 20, 44, -8, 22, 31, 11, -7, 16, 
  -16, -17, -53, -20, -11, -41, -26, 1, 30, -19, -45, -7, -8, -17, 18, 7, -6, 50, 1, -26, -40, 6, 9, -3, 7, -51, -46, 0, -14, -18, -38, 10, 
  -43, -4, -29, -37, 39, -29, 6, -59, -1, -59, -28, 12, 35, -39, -18, 8, -19, -5, -30, -58, -12, -8, 7, 2, -27, -7, 60, -33, 5, 15, 52, 42, 
  -22, 19, 26, -4, -21, 45, -67, 21, -8, 49, 22, -24, -45, 12, 20, 30, 31, -52, 21, 24, 51, 41, -12, -28, 11, 24, -34, 30, -6, 6, -44, -5, 
  -34, -4, -50, -21, 68, -26, 23, -3, -18, -28, -35, 33, -10, -22, -27, 21, -17, -3, 10, -26, -11, -49, 2, 6, -49, -41, 41, -60, -15, 8, 8, -5, 
  5, -27, 42, -16, 43, -2, 45, -52, 50, -41, -2, 47, 25, 32, 53, 12, -59, 127, 7, -9, -41, 18, 23, -18, 21, -3, 41, -36, 25, -29, 37, -54, 
  -41, -35, -40, 0, 35, 2, 43, -25, 3, 15, -10, 29, -17, -31, -29, 2, 20, -29, 8, -29, 4, -15, -17, 5, -52, -57, 4, 9, 16, 13, 55, 4, 
  28, -34, 62, 6, 17, -20, -8, -19, 87, -21, -35, 27, 26, -37, 2, 8, -42, 24, -4, -7, -51, 10, -4, 18, -2, -11, 7, 21, -15, 9, 16, -24, 
  -11, -27, 32, -16, -2, -43, 25, -27, 52, -15, -53, 38, 14, 52, 66, 1, -61, 91, -27, -7, -39, -15, 0, -23, 1, -30, -9, 16, 23, -9, 13, -23, 
  -35, -39, -6, 16, 15, 33, -10, 21, -33, 35, 0, -40, -40, 20, -23, -15, 8, -19, -17, -14, 23, 2, -16, -3, 5, 6, -5, 2, 0, 21, 12, 42, 
  -49, -14, -21, -45, 48, -37, 33, -25, -2, -61, -17, 38, 20, -61, -15, -4, -4, -19, 6, -28, 1, -44, -7, -14, -76, -46, 37, -47, -5, 0, 45, -28, 
  -42, -7, -40, -4, 26, 65, 51, -15, 1, -79, -30, 11, 6, -33, 7, -14, 49, -45, -14, -27, 16, -61, -1, 6, -82, -14, 5, -26, -8, -15, 43, 25, 
  57, -44, 21, -47, -24, -22, -9, 8, -20, 0, -13, 3, -34, -22, 46, -7, -60, 24, 17, 30, -29, -16, 13, 17, 30, -17, -24, 59, 6, -17, -30, 5, 
  16, -34, 17, -37, 83, -17, 20, -16, 18, -58, 8, 24, 26, -27, 41, -15, -34, -16, 29, -28, -30, -21, -3, -23, -14, -32, 61, -33, 23, 16, 62, -43, 
  -18, 4, 6, -5, 14, 1, -12, 21, -30, 66, 37, -30, 4, -11, -29, 10, 29, -1, -23, -27, 22, 0, -23, 9, 38, 18, 13, 8, 26, 14, 3, 84, 
  -15, -35, -8, -24, -21, 1, -5, -15, -7, 8, -28, -3, 3, -2, -24, 19, -15, -12, -1, 1, 16, -21, 19, 2, -24, 15, -25, -20, 7, -6, -27, -49, 
  90, -35, 20, 2, 1, -37, -4, -27, 40, -24, -30, 8, -26, 46, 44, 10, -73, 79, 18, 14, -62, 13, 8, -1, 26, -18, 9, 22, -19, 19, -1, 5, 
  -1, 22, -20, 25, -11, 30, -52, 36, 24, 29, -1, -1, -58, -45, -21, 6, 26, 4, 25, 17, 11, 21, -6, 1, -12, 34, -20, -19, -4, -12, -8, 76, 
  58, -27, 13, -21, -27, -6, 15, -65, 58, 4, -71, 4, -14, 30, 46, -5, -87, 22, -12, 2, -65, 38, 10, -7, -5, -64, 0, 21, -3, 3, -6, -34, 
  -29, -13, -32, -12, 32, 14, 26, 17, 11, 8, -10, 36, 36, -50, -26, 4, 7, -26, 12, -5, 22, -6, -18, -3, -18, 51, 12, -62, 7, -3, 61, 46, 
  -18, 54, -21, 18, 3, 12, -11, 23, -33, 51, 13, -53, -11, -5, -21, 19, 20, 15, -9, 11, 17, -20, 27, -5, -2, 39, 2, -8, 37, 16, -33, 48, 
  14, -64, 34, 4, 26, -41, 29, -19, 35, -17, -60, 39, 30, 13, 37, 10, -49, 30, -13, -41, -86, 0, -15, -8, 1, -52, 2, -6, 11, -6, 27, 23, 
  -33, 5, -38, -41, 4, -50, -4, 29, -60, 1, 17, 4, -29, 28, -43, -27, 28, 17, -29, 67, -18, -36, -13, -3, 15, -46, -27, -13, 12, 13, 9, -14, 
  -54, -29, -7, -66, 52, -44, 19, -9, 8, -37, -1, 23, 51, -15, 12, 3, 5, -13, -22, -67, 19, -62, 28, 21, -76, -42, 0, -34, -4, -22, 9, -34, 
  -42, -22, -24, -34, 31, 7, 20, -26, -10, -64, -22, 39, 19, -37, -36, -3, -31, -41, -3, -42, -5, -54, 6, 16, -45, -26, 66, -50, 19, 13, 41, -70, 
  41, 0, 42, 4, -5, -30, -36, -20, 19, -15, -16, -12, -45, 28, 29, -7, -38, 29, 32, 20, -28, -23, -29, 12, 24, -34, -13, 50, 22, -2, -8, -73, 
  -40, 41, -34, -21, 8, 42, 57, 35, -7, 30, 39, 42, 30, -26, -35, -18, 37, -25, -10, 6, 40, -9, -8, -5, -44, 30, 51, 11, 9, 16, 36, 75, 
  33, -29, 15, 5, 16, -11, -13, -26, 69, -13, -20, 47, 37, -5, 49, -9, -14, 47, -9, -21, -20, -11, -26, -12, 7, -8, 41, 27, 0, -15, -20, -12, 
  -60, -27, -22, -43, 50, -26, 22, -18, 9, -67, -8, 11, 42, -45, -15, -19, 1, 4, -18, -48, 29, -18, 20, 19, -48, -35, 24, -55, 5, 29, -12, -36, 
  -30, 39, 6, 15, 17, 17, -19, 39, -21, 41, 3, -11, -19, 5, -42, -17, 0, -56, -7, 4, 30, -2, -15, 2, 13, 17, -20, -5, 33, -5, 6, -10, 
  -23, -8, -18, -31, 35, -42, 31, -22, 25, -71, -21, 20, 15, -31, -13, 13, 0, -12, -16, -59, 20, -30, 28, -15, -34, -12, 49, -52, 25, 18, 52, 9, 
  26, -13, -13, -13, 30, -46, 5, -15, 71, -34, -8, 30, 14, -42, -4, 10, -24, 42, -11, -31, -48, -47, 8, -1, 10, -20, 39, 45, -14, -3, 18, -33, 
  44, 38, 34, 52, -3, 25, -26, 71, 12, 78, 16, -3, -16, 29, 12, 15, -10, 39, -16, 57, -5, 50, 5, 17, 30, 11, -10, 39, -32, -6, -17, 55, 
  48, -31, 41, -32, -9, -3, 10, -31, 59, -21, -23, 47, 18, 39, 40, 8, -59, 37, -2, -12, -24, 12, -6, 23, 27, -22, -2, 35, -6, -19, -4, -37, 
  37, 76, 32, 62, -5, 47, -13, 31, -5, 11, -6, -15, -39, 50, -9, -7, -12, 33, -21, 65, 15, 20, -23, -11, 32, 10, -36, 77, -25, 31, -29, 6, 
  -7, 38, -11, -35, 13, 48, -18, -13, -14, 17, -30, -34, -5, -24, -24, -20, 45, -24, 20, 55, 19, 5, -23, 0, -21, -25, 6, 9, -19, -8, -17, 27, 
  -37, 3, -30, -55, 22, -7, 2, 14, -17, -5, 13, -3, 29, -41, -28, -15, -3, 12, -14, -58, -18, -43, 12, 22, -74, -22, 10, -53, 20, 7, 38, -29, 
  21, -53, 27, -14, 27, -13, 34, -27, 21, -6, -11, 28, 24, 20, 40, -20, -86, 69, -3, 7, -37, 33, -1, -13, -5, -27, 18, 18, -6, 9, 39, -43, 
  48, -14, 81, -16, 5, 20, -8, -19, -1, 28, -7, -6, -1, 46, 20, 17, 14, 7, 21, 87, -57, 31, 29, -15, 36, -17, -22, 55, 3, 2, -9, 11, 
  -48, 2, -33, 30, 55, -18, 84, -8, -14, -62, -14, -36, 78, -35, -37, 16, 31, -17, 6, -22, 0, 2, 12, -8, -7, -12, 55, -26, 1, -18, 97, 36, 
  13, -22, -15, -27, -27, 5, -46, 4, -3, 5, 19, -25, -5, -44, -37, 15, 53, -25, -6, 28, -1, -23, -20, -20, 31, -4, -10, -14, 15, -21, 6, 74, 
  -41, -10, -24, -68, 8, -35, 30, -21, -11, -67, -31, 49, 14, -34, 16, 17, 23, -41, -8, -54, 0, -49, 9, 14, -65, -53, 15, -49, -2, -25, 58, -32, 
  88, -8, -1, -3, -35, -45, -17, -84, 26, -5, -57, -17, -71, 75, 48, -2, -20, 52, 19, -32, -55, 14, -24, -9, 3, -49, -38, 39, 11, -11, -45, -23, 
  -25, 33, -3, 26, -10, -55, -2, 49, -47, -40, 28, -18, -19, -13, -76, 2, 44, 8, 14, 37, 28, 5, 5, -11, 7, 62, 2, -10, -15, 22, -11, -5, 
  64, -5, 22, 36, -6, -5, -20, 30, -7, 41, 9, -12, -30, 41, 24, 24, 6, 15, 5, 69, 2, 45, 5, 20, 48, 10, -14, 83, 44, 5, -12, -13, 
  -41, -10, -34, -38, 49, 24, 34, 8, -11, -25, 5, -3, 37, -55, -21, 14, -6, -22, 0, -78, -16, -52, 23, 17, -59, -2, 66, -38, -23, 3, 58, -36, 
  3, 40, 31, 37, -25, 65, -23, 43, -4, 80, 33, -11, -22, 9, -6, 5, 36, -67, 14, 53, 15, 9, 20, 4, 19, 47, -40, 61, 17, -16, -27, 29, 
  -10, 25, 41, 57, -8, 15, -14, 35, -44, 68, -5, -12, -9, 42, -2, 12, -2, -14, -12, 33, 24, -17, 5, -14, 21, 43, -5, 12, 28, 10, -23, 15, 
  -11, 29, 6, 18, -22, -16, -43, 54, -35, 47, 26, -25, -23, -10, -17, -18, -1, -61, -13, 48, 19, 66, 26, 21, 27, 34, -11, 44, -8, 10, -18, 10, 
  0, -31, -26, 5, 30, -7, -11, -17, 15, -8, -9, -36, 37, -33, -7, 18, -28, -45, -1, -39, -4, -20, 24, 2, -44, -13, -19, -37, 1, -17, -7, 1, 
  62, -66, 20, -20, -44, -5, -43, -43, 47, -23, -71, 15, -25, 3, 24, 13, -45, 51, 9, -18, -53, 15, 19, 26, -5, -29, -77, 8, 11, 13, -42, 6, 
  -11, -14, -14, 11, -3, 20, -27, 24, -13, -2, 16, -25, 3, 4, -23, 19, 29, -52, 4, 13, 41, 15, -10, -26, 14, -17, -18, -12, 41, 18, -15, -25, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 64,32 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0097244232892990112, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[3*64] = { 
  -7, -36, -30, 38, -28, 12, -8, -13, 19, 2, 5, -3, -6, 29, -53, 15, -17, 29, -27, 28, 44, -11, -38, -32, 12, -2, -8, -24, 38, 18, 36, -20, -24, 12, -33, -40, -44, 20, -33, 36, -32, -10, -43, 18, 16, 32, -16, -12, -33, 13, 25, -6, 8, -20, 26, -35, 4, -19, 16, 17, 0, -3, 25, -13, 
  -127, 21, 39, 1, 29, -28, -108, -31, -89, -85, 12, -8, -45, -16, 23, -78, 11, 33, 23, -5, 25, -17, 41, 27, -54, 44, -50, 16, -17, -40, -6, 23, -54, 12, -59, 37, 18, -51, 10, 23, 20, -10, 30, 1, -93, 11, -96, -17, 25, 15, -53, 44, -57, 37, -32, -37, -103, 41, -83, -87, -102, 19, -12, -55, 
  18, -4, -4, -13, -13, 19, -3, 33, 37, 13, -55, 17, 25, -26, -4, 23, -26, -20, -28, -34, -27, 25, -22, 5, 6, -31, 32, 2, -26, 29, -3, 3, 7, -47, 40, -6, -34, -21, 3, -39, -5, 19, -23, -37, 25, -30, -8, 31, -15, -31, 16, -4, 19, 0, -12, 10, 8, -11, 18, 21, -3, -70, -29, 19, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 3,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.011039157398045063, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*3*32] = { 
  /* [0][0][][] */ -96,27,-100,52,71,-83,38,61,65,-79,-31,66,-18,93,-47,-107,-44,-18,-54,-56,-101,41,-23,32,103,96,-125,-3,-2,-62,-86,2, -77,-33,83,35,-127,-91,-19,-100,117,9,72,-56,-24,69,77,-112,9,-40,84,-23,-65,-57,-34,96,-31,-65,15,-30,-80,-61,61,-64, -26,-122,-116,-41,35,21,-56,79,102,-12,-64,-87,-57,-6,-74,-51,9,-64,-24,51,86,23,68,17,-56,-77,-71,-30,-22,48,-25,21, 
  /* [1][0][][] */ -76,12,-54,-58,-26,56,104,5,35,115,-6,-89,-40,2,-34,-5,-79,7,51,-4,-99,24,-35,-18,41,-11,-100,-59,-25,68,17,-9, 6,66,-28,-34,-65,36,100,95,72,55,-36,23,-3,15,13,-17,-38,67,42,83,-49,0,7,45,49,5,-104,-65,8,77,82,34, -37,36,-63,-78,-67,-1,26,81,70,127,-59,25,-46,-33,20,7,-75,1,48,38,-32,-33,-13,-11,24,-2,-119,-65,33,62,20,43, 
  /* [2][0][][] */ -1,-102,-86,115,-127,-101,-121,103,-46,-61,0,120,77,38,-44,-122,41,-3,-29,79,-80,18,-35,69,-47,-43,10,-108,-96,-22,-94,24, 95,-91,-34,68,-15,-56,31,-20,-87,-80,-51,61,-58,106,-40,-106,-45,-74,86,-69,80,-16,53,-64,80,-38,-96,46,-57,-56,-82,2, 5,13,-92,96,21,-18,-20,44,25,-35,8,-83,122,71,-37,-3,-111,-119,104,-11,84,-86,112,55,-54,-123,30,-46,55,88,11,-62, 
  /* [3][0][][] */ -113,42,-27,88,56,-127,-54,17,-68,-18,-20,-52,-41,22,20,-113,-29,-37,-126,-89,-33,34,43,-109,34,-30,-50,-45,-76,16,-22,-27, -39,-67,25,59,-79,44,-46,-116,-71,-31,-21,-110,6,40,32,5,-66,29,-124,5,-68,-96,-62,61,-28,49,-25,-82,-20,44,38,-98, -44,-26,1,19,16,20,45,-95,-119,29,-19,-31,-111,-116,47,-93,-19,-87,62,-76,31,-42,39,7,3,-51,8,61,49,-10,34,-88, 
  /* [4][0][][] */ -21,19,-98,22,71,-88,-4,-9,-127,-4,12,62,-13,28,-23,-106,7,-102,-44,-74,-1,-38,-6,-108,12,14,-30,-76,82,-111,-29,-101, 75,-65,-118,-114,76,85,-89,30,-76,35,-56,-40,31,5,-125,-92,-21,-34,-1,-120,-118,-48,-116,-61,79,-97,-77,63,-33,-110,-83,77, 24,80,-98,27,8,-3,81,67,-57,-18,86,-10,57,-111,25,-36,-72,-51,79,27,52,-73,-112,-62,18,13,44,-75,56,-3,-50,-96, 
  /* [5][0][][] */ -78,48,43,42,-67,-52,-22,-30,5,32,-9,12,-10,43,-33,22,63,127,35,50,17,40,33,-49,4,14,65,7,-17,34,56,33, -36,39,41,84,32,18,-90,-37,-46,-44,-77,-7,-51,25,-48,-7,27,7,-32,-57,-57,-14,-43,-59,-37,-33,13,-44,-42,-43,9,-15, -88,-43,44,41,-31,-37,105,68,35,28,12,62,2,112,12,19,11,86,68,-32,-32,33,61,-6,5,23,29,42,6,51,40,39, 
  /* [6][0][][] */ -101,-84,-126,-109,-44,-35,84,23,-101,71,-63,29,2,-57,19,10,32,-47,-25,-94,-71,-11,-11,50,-48,-110,-111,-47,69,-93,-127,-109, -46,68,-36,67,-14,-111,-99,50,-46,-81,-47,38,-40,7,-69,-124,-34,-40,-3,-1,-37,-17,-115,76,-84,-2,-120,81,4,37,66,11, -112,-74,-101,-77,36,-51,4,-66,-86,-111,-28,24,-6,56,-41,18,-89,53,19,-24,-12,-61,62,12,16,46,1,3,-39,-10,-36,-14, 
  /* [7][0][][] */ 25,-35,37,70,24,13,11,18,-6,21,-42,-25,-12,13,-32,-20,-41,18,46,-15,41,-27,32,60,27,-24,-72,-92,9,10,-76,-81, 127,3,54,43,100,70,75,60,46,17,4,53,-57,-25,7,14,3,-31,-33,1,-34,-22,22,14,31,-37,-38,-90,-8,-40,-6,-59, 90,41,75,37,72,89,66,54,57,17,-41,-29,-49,27,22,-29,-77,-71,-46,-16,15,-16,34,72,-14,-21,-68,-40,-24,-2,-37,2, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,3,32 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0019051670096814632, 0.0056531759910285473, 0.0017320309998467565, 0.0024110493250191212, 0.0020207518246024847, 0.0054322476498782635, 0.0020837299525737762, 0.0055187479592859745, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[16*1*3*8] = { 
  /* [0][0][][] */ -30,-50,-20,31,-14,-85,34,29, 33,8,-35,-16,-15,-127,11,-12, 18,-81,32,23,19,-6,25,7, 
  /* [1][0][][] */ -26,61,-39,-34,-4,-35,41,127, -35,-5,-20,13,-24,-44,-3,-19, 42,22,14,46,38,-52,-28,-80, 
  /* [2][0][][] */ -47,71,-36,-34,-3,94,-42,-127, 35,25,-11,33,4,29,-40,-85, -13,-64,-20,-50,15,-30,26,-85, 
  /* [3][0][][] */ -25,18,4,0,-17,62,-5,-10, -16,-13,9,35,24,65,37,-127, 4,-60,22,1,-11,-42,26,-22, 
  /* [4][0][][] */ 14,30,46,13,23,-25,-21,4, -38,-22,11,-2,-17,-31,29,127, 38,-62,49,65,-20,65,-44,80, 
  /* [5][0][][] */ 28,-86,-35,13,34,16,14,41, -20,-127,-31,16,10,57,-20,4, -8,-21,16,-2,30,11,-21,9, 
  /* [6][0][][] */ 43,75,30,48,14,34,-26,127, 17,-51,26,-67,12,-21,-23,-7, -45,-35,-2,-38,52,-73,-19,-25, 
  /* [7][0][][] */ -31,9,34,-16,-26,102,26,66, 13,-59,-25,4,33,-19,21,-113, -48,-127,-27,-3,17,7,-28,32, 
  /* [8][0][][] */ -31,-39,31,-16,-22,-15,-4,43, -9,-127,-29,30,22,44,16,69, -4,-80,20,-41,-6,8,33,22, 
  /* [9][0][][] */ -14,-89,14,7,35,37,-69,21, 16,127,57,-42,13,51,45,6, -55,22,48,13,3,-35,36,-35, 
  /* [10][0][][] */ 7,10,30,0,4,-116,-28,-19, 48,20,7,18,54,41,41,-127, 10,49,-5,-48,-21,-38,52,-39, 
  /* [11][0][][] */ -4,-72,-7,16,-12,20,19,23, -31,113,33,-37,-37,-4,15,127, 11,33,-47,29,53,-88,48,25, 
  /* [12][0][][] */ 37,48,-49,-5,24,81,20,-127, -10,28,49,-1,22,-34,24,-46, 5,-37,-26,-28,-16,-63,-5,-52, 
  /* [13][0][][] */ 1,29,-32,29,-38,-40,-2,-91, -32,-103,13,-10,29,15,-40,-16, -5,-127,-29,37,-4,99,32,65, 
  /* [14][0][][] */ -3,15,30,11,-52,72,-35,-35, 4,47,-43,-2,33,5,5,-118, -34,2,29,-38,-11,65,-5,-127, 
  /* [15][0][][] */ 87,14,-24,59,-47,-110,-111,-8, -50,-21,-10,-125,113,19,95,-24, 61,-126,51,-127,-58,-3,-77,-11, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant10_scale = { 16, { 0.0068825525231659412, 0.0058042514137923717, 0.0058357017114758492, 0.0064456742256879807, 0.0047864113003015518, 0.007588360458612442, 0.0042568054050207138, 0.0063896882347762585, 0.0074669071473181248, 0.0047551481984555721, 0.0058161071501672268, 0.0055501773022115231, 0.0055920742452144623, 0.0059487433172762394, 0.0057916948571801186, 0.0023236307315528393, } };
const TfArray<16, int> quant10_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[32*1*3*16] = { 
  /* [0][0][][] */ 19,-13,74,-7,-31,-12,-42,67,-36,-39,42,-12,-14,78,-4,8, 44,65,-90,-88,10,-57,46,-44,7,68,-30,100,-34,-72,-82,-6, 12,43,-127,-53,12,-33,16,-5,-46,-24,10,22,-80,15,-103,20, 
  /* [1][0][][] */ 2,3,61,54,-82,-49,50,30,-23,30,37,-17,26,-91,65,-18, -72,-11,87,-19,-65,5,1,77,-44,-51,-17,-127,34,2,-24,-4, 0,21,11,7,-39,63,3,-50,9,-4,-21,4,-25,-17,-48,22, 
  /* [2][0][][] */ -78,9,-26,-9,-23,-6,-14,-17,-101,-21,9,-4,-23,-25,-26,2, 29,76,-23,-55,0,-52,73,-127,-15,74,70,102,16,-81,-9,-21, 27,-24,-51,-87,7,-28,24,-50,-55,-29,4,24,15,56,-108,-12, 
  /* [3][0][][] */ -48,-43,-51,26,-35,-4,17,37,-6,-62,-11,-19,0,-63,5,13, 39,-17,-36,31,13,-42,33,-114,-5,18,67,-30,6,-102,49,-38, -62,29,127,61,-12,16,5,22,-32,-57,100,-75,56,-15,74,-17, 
  /* [4][0][][] */ 66,13,-35,14,23,45,-23,-17,127,-36,-53,-34,-54,43,-24,-5, -2,-47,-28,-42,-51,35,-35,44,54,-26,-58,-69,-31,-13,-40,-4, 7,18,-53,21,-16,-19,36,23,-22,-27,28,18,-46,1,-7,18, 
  /* [5][0][][] */ 19,-3,60,29,-69,26,42,-23,-39,-3,19,-34,-15,-127,60,18, -37,-44,85,54,-50,-38,-50,50,-35,-16,30,-54,44,-16,30,11, -100,-2,-104,-55,-53,1,-27,47,-27,-54,25,-65,-92,35,19,-20, 
  /* [6][0][][] */ -43,-21,-111,-30,-116,39,-12,-31,127,-41,-7,-32,-84,49,10,9, 116,-21,-21,3,-2,101,-88,-52,58,-57,-17,-65,-75,33,-34,-28, 117,-18,-19,-15,-9,55,-56,75,33,-59,-58,-82,-10,-21,-26,-26, 
  /* [7][0][][] */ 61,-4,26,23,-94,-10,12,-22,-5,18,65,-24,-26,-127,83,18, -5,-76,90,27,-40,-36,-54,47,22,-4,20,-54,28,-15,10,-15, -5,-27,-4,-5,-1,-8,-18,24,-17,28,-16,-42,-6,-3,-26,5, 
  /* [8][0][][] */ 11,17,-23,7,38,-36,11,-26,-31,-16,35,-28,0,68,42,-4, 10,28,-127,-93,45,18,4,-46,4,28,21,47,-53,-42,-61,0, -15,31,-40,30,18,20,55,11,-12,57,-84,53,-14,-46,-35,-2, 
  /* [9][0][][] */ 32,-43,-23,10,-91,4,33,25,-16,3,37,-97,19,-127,64,-28, -27,-21,119,60,-49,-13,-8,30,-99,-82,65,-120,99,-4,-7,3, 35,12,-120,-74,-23,-22,3,-33,24,-3,-38,-37,-105,29,-2,-15, 
  /* [10][0][][] */ 13,62,15,60,-103,54,34,-16,-39,10,47,-18,29,-111,64,30, -22,5,97,24,-112,-20,-41,25,-35,-55,56,-127,77,14,36,1, 86,-59,-60,-25,3,13,-53,-2,-1,-39,-48,-70,-30,-35,1,-5, 
  /* [11][0][][] */ 89,-11,-100,-39,-101,-14,1,-42,64,-64,26,-67,-127,39,16,-20, -50,-23,-26,-58,42,87,-5,-47,114,-64,-28,-45,-23,35,-49,7, 17,-7,-39,-50,21,82,-12,-19,23,-19,-61,-69,-49,-84,-67,30, 
  /* [12][0][][] */ 84,-48,-99,-119,76,122,-93,-127,126,-120,-92,-53,-116,44,-23,-12, 24,-43,-86,10,-7,88,-80,67,74,-8,-49,-110,-126,18,-81,-36, 0,-68,-117,21,-27,48,-30,16,48,-34,-52,-28,-70,-44,-48,-47, 
  /* [13][0][][] */ -5,6,-75,-18,-8,1,55,-56,-25,15,44,29,-48,-68,-75,-14, -56,127,26,-5,-40,-31,75,0,-16,43,53,64,37,-47,-101,-17, -5,0,12,-114,-67,3,-49,-124,73,-127,-37,-63,59,57,-32,19, 
  /* [14][0][][] */ -1,-8,80,-29,-2,-19,-63,10,-80,-9,33,-37,36,27,-18,-16, -36,54,-55,-71,19,-49,14,-76,-80,23,6,107,14,-116,-32,-17, 6,68,-107,-30,4,-30,48,-35,-10,-124,-44,-50,-127,19,-86,27, 
  /* [15][0][][] */ -27,-91,-103,43,-42,-10,-2,73,-31,-127,21,0,-72,-43,-88,49, 13,-53,41,-68,-51,-1,-6,12,-38,-22,-14,23,32,-78,30,-44, 77,-74,-84,11,-96,14,-89,-103,-96,-105,-8,31,41,14,-56,-3, 
  /* [16][0][][] */ -52,-38,-27,-16,-127,-27,-4,11,26,-96,-90,-116,-16,-125,-47,-35, -25,2,20,16,-48,-22,27,17,-57,32,25,0,-18,-38,21,-19, -80,-41,101,64,-105,63,-63,32,-61,-34,9,-110,51,-17,39,18, 
  /* [17][0][][] */ -14,-27,-22,-29,-15,-40,12,-29,-22,-24,-27,-63,-3,-74,-7,22, 55,127,-110,-82,-12,-58,38,-21,-46,12,104,33,-42,-8,-82,2, 27,86,23,-62,1,-36,26,-125,-16,27,68,61,18,1,-22,-17, 
  /* [18][0][][] */ 12,-113,-16,-117,-115,-55,10,-52,-31,-61,-82,46,-54,-38,78,64, 38,53,84,-27,-44,-127,46,-104,12,-3,-126,-56,-94,-93,-4,-115, -88,-45,-32,-84,90,70,-85,-59,-48,81,19,-17,-98,70,-77,114, 
  /* [19][0][][] */ -44,18,105,48,-34,-47,9,98,-48,40,-11,21,82,-44,16,21, -21,-39,-94,-70,-54,-64,-59,-47,18,-20,-8,-34,-35,-53,29,-13, -42,28,106,58,-37,-29,-9,30,-127,-4,69,-51,83,-50,68,-4, 
  /* [20][0][][] */ 36,16,20,58,-65,-4,42,-40,-34,33,6,-23,22,-78,58,-7, -46,-25,127,73,-45,11,9,-8,-83,-26,-11,-106,44,16,4,22, -21,15,12,5,-47,-23,-6,-24,-66,20,-6,-24,-16,-35,-16,-26, 
  /* [21][0][][] */ -74,34,54,-14,-28,4,83,116,-5,73,65,73,120,-69,-36,3, -11,45,-5,-71,-24,0,36,-77,-16,13,38,42,-16,18,-86,-5, -38,-22,-53,-14,-15,-30,-33,-78,-20,-57,-30,-10,-99,-127,1,15, 
  /* [22][0][][] */ 24,-78,-6,9,-25,-52,11,40,-11,26,-7,-33,-3,-44,-46,-25, -56,-43,8,3,-22,38,18,5,-1,-69,-41,-90,3,-127,-74,-19, 24,-58,-44,58,-68,73,67,-6,-21,-12,-65,-70,19,55,-73,-53, 
  /* [23][0][][] */ -7,5,74,-36,-27,-68,-22,7,33,-44,-37,36,36,16,-22,-40, -4,-55,-17,-61,-116,55,-8,13,46,-127,-110,-28,-86,-15,-69,38, -52,-55,-66,23,-93,13,-46,-77,14,0,-27,38,-77,7,-26,51, 
  /* [24][0][][] */ 16,39,-37,14,-45,-33,-13,4,-30,-82,-40,-66,-5,-38,-18,3, -18,21,24,18,-3,-24,32,-22,0,55,76,43,47,-127,-8,25, 51,62,45,31,40,31,49,-26,-12,-26,31,6,32,-34,-47,-12, 
  /* [25][0][][] */ 81,-55,14,-7,-77,44,-42,-57,-6,-13,-43,-41,-1,-37,6,16, 67,-4,29,37,-67,-1,24,-101,-68,-41,47,-54,9,-127,40,15, -64,20,84,4,-45,-43,22,-2,-107,-63,69,-81,77,-1,0,12, 
  /* [26][0][][] */ 40,6,-29,-27,56,86,-38,-84,127,-76,-12,-24,-56,60,-43,2, -36,-28,-25,1,14,73,-57,70,63,-72,-16,-112,-36,-40,-34,24, -12,-20,-25,15,-5,-2,27,11,-29,-5,-17,-22,-21,-28,13,-2, 
  /* [27][0][][] */ 24,127,-69,-109,4,-36,28,-17,-15,-4,69,64,-15,-34,-123,-6, -42,10,49,-53,-23,-57,54,-15,-51,27,36,5,82,-7,-61,-17, 31,22,-54,-15,16,-22,6,-67,15,-24,1,4,-28,40,-21,2, 
  /* [28][0][][] */ 7,-29,3,-61,-83,-82,-72,10,-51,29,19,-18,-117,-11,-11,26, 64,-33,-113,-127,-83,-56,-1,14,-94,10,55,-50,-39,-102,-53,-36, 64,-38,-49,40,8,-10,-47,30,3,-4,37,-47,-58,54,-11,-31, 
  /* [29][0][][] */ -28,5,-45,-21,-49,14,64,-68,-27,-65,44,-111,80,-116,28,-27, -15,-16,25,-127,-113,-118,9,83,44,28,-87,-93,-3,-102,-74,61, 27,-109,-51,59,-99,46,-30,-117,61,-27,-118,12,-81,-33,-40,-76, 
  /* [30][0][][] */ 28,-13,-55,-11,10,100,-90,-39,83,-102,0,-47,-127,116,40,2, -20,13,-13,2,-32,75,-51,24,64,-57,-61,-110,-18,-34,-13,-22, 18,27,-16,3,-14,-25,-12,-5,-54,-17,-28,-32,-3,-21,-14,-32, 
  /* [31][0][][] */ 40,36,47,-34,-70,42,-15,-127,-2,-11,80,-52,-2,-89,38,-10, 23,-16,63,42,-34,-38,-25,-2,-20,-41,11,-36,42,-44,15,-12, -26,36,6,-9,-4,-37,-11,14,-28,-21,-3,-32,-6,-71,5,9, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant11_scale = { 32, { 0.005669858306646347, 0.0059022069908678532, 0.0069115967489778996, 0.0057735433802008629, 0.0086158802732825279, 0.0074764597229659557, 0.0076836161315441132, 0.0073123523034155369, 0.0064626503735780716, 0.0054176622070372105, 0.0045180888846516609, 0.0062100160866975784, 0.0047453856095671654, 0.0070268702693283558, 0.0065911225974559784, 0.0021048320923000574, 0.0052648573182523251, 0.0080866608768701553, 0.0020719452295452356, 0.0064843101426959038, 0.005986242089420557, 0.0055505996569991112, 0.002755272900685668, 0.0026666990015655756, 0.0066059185191988945, 0.0062327133491635323, 0.006522804033011198, 0.0090440930798649788, 0.0031037325970828533, 0.0020226675551384687, 0.0065588750876486301, 0.008693828247487545, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int32_t tensor_data12[4] = { 1, 1, 7, 32, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data13[4] = { 1, 7, 1, 8, };
const TfArray<1, int> tensor_dimension13 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data14[4] = { 1, 1, 4, 8, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data15[4] = { 1, 4, 1, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data16[4] = { 1, 1, 2, 16, };
const TfArray<1, int> tensor_dimension16 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data17[4] = { 1, 2, 1, 32, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,1,7,32 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0029258579015731812, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,7,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.010271281935274601, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,7,1,8 } };
const TfArray<1, float> quant20_scale = { 1, { 0.010271281935274601, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,4,1,8 } };
const TfArray<1, float> quant21_scale = { 1, { 0.010271281935274601, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,4,8 } };
const TfArray<1, float> quant22_scale = { 1, { 0.010271281935274601, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,4,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.0075647174380719662, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,4,1,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.0075647174380719662, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,2,1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.0075647174380719662, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,1,2,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.0075647174380719662, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,2,32 } };
const TfArray<1, float> quant27_scale = { 1, { 0.013204039074480534, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,2,1,32 } };
const TfArray<1, float> quant28_scale = { 1, { 0.013204039074480534, } };
const TfArray<1, int> quant28_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<4, int> tensor_dimension29 = { 4, { 1,1,1,32 } };
const TfArray<1, float> quant29_scale = { 1, { 0.013204039074480534, } };
const TfArray<1, int> quant29_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<2, int> tensor_dimension30 = { 2, { 1,32 } };
const TfArray<1, float> quant30_scale = { 1, { 0.013204039074480534, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<2, int> tensor_dimension31 = { 2, { 1,64 } };
const TfArray<1, float> quant31_scale = { 1, { 0.046698857098817825, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<2, int> tensor_dimension32 = { 2, { 1,3 } };
const TfArray<1, float> quant32_scale = { 1, { 0.46414494514465332, } };
const TfArray<1, int> quant32_zero = { 1, { 77 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<2, int> tensor_dimension33 = { 2, { 1,3 } };
const TfArray<1, float> quant33_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,12 } };
const TfArray<1, int> outputs0 = { 1, { 18 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 18,9,2 } };
const TfArray<1, int> outputs1 = { 1, { 19 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 19,13 } };
const TfArray<1, int> outputs2 = { 1, { 20 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 20 } };
const TfArray<1, int> outputs3 = { 1, { 21 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 21,14 } };
const TfArray<1, int> outputs4 = { 1, { 22 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 22,10,3 } };
const TfArray<1, int> outputs5 = { 1, { 23 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 23,15 } };
const TfArray<1, int> outputs6 = { 1, { 24 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 24 } };
const TfArray<1, int> outputs7 = { 1, { 25 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 25,16 } };
const TfArray<1, int> outputs8 = { 1, { 26 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 26,11,4 } };
const TfArray<1, int> outputs9 = { 1, { 27 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 27,17 } };
const TfArray<1, int> outputs10 = { 1, { 28 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 28 } };
const TfArray<1, int> outputs11 = { 1, { 29 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 29,1 } };
const TfArray<1, int> outputs12 = { 1, { 30 } };
const TfLiteFullyConnectedParams opdata13 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs13 = { 3, { 30,7,5 } };
const TfArray<1, int> outputs13 = { 1, { 31 } };
const TfLiteFullyConnectedParams opdata14 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs14 = { 3, { 31,8,6 } };
const TfArray<1, int> outputs14 = { 1, { 32 } };
const TfLiteSoftmaxParams opdata15 = { 1 };
const TfArray<1, int> inputs15 = { 1, { 32 } };
const TfArray<1, int> outputs15 = { 1, { 33 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 384, (TfLiteIntArray*)&tensor_dimension18, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 608, (TfLiteIntArray*)&tensor_dimension19, 56, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 56, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension21, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 160, (TfLiteIntArray*)&tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension23, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension24, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension25, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 256, (TfLiteIntArray*)&tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 192, (TfLiteIntArray*)&tensor_dimension27, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension28, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 96, (TfLiteIntArray*)&tensor_dimension29, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension30, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension32, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 34;
  for(size_t i = 0; i < 34; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 16; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 16; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  33, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 16; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
